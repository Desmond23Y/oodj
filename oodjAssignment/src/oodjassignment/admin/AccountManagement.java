package oodjassignment.admin;

import oodjassignment.DataValidation;

import java.awt.Color;
import java.awt.Component;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

public class AccountManagement extends javax.swing.JFrame {

    DataLoader dataLoader = new DataLoader();
    private final BaseManagement baseManagement;

    public AccountManagement() {
        initComponents();
        tbUser.setName("User");
        tbScheduler.setName("Scheduler");
        tbAdministrator.setName("Administrator");
        tbManager.setName("Manager");
        baseManagement = new BaseManagement();
        addTableMouseListeners();
        loadAllTables();
        initCustomRenderers();

    }

    private void initCustomRenderers() {
        tbUser.getColumnModel().getColumn(5).setCellRenderer(new StatusCellRenderer());
    }

    private void loadAllTables() {
        dataLoader.loadTableData(tbUser, "src/oodjassignment/database/User.txt");
        dataLoader.loadTableData(tbScheduler, "src/oodjassignment/database/Scheduler.txt");
        dataLoader.loadTableData(tbAdministrator, "src/oodjassignment/database/Administrator.txt");
        dataLoader.loadTableData(tbManager, "src/oodjassignment/database/Manager.txt");
    }

    private javax.swing.JTable getSelectedTable() {
        int selectedIndex = jTabbedPane1.getSelectedIndex();
        return switch (selectedIndex) {
            case 0 -> tbUser;
            case 1 -> tbScheduler;
            case 2 -> tbAdministrator;
            case 3 -> tbManager;
            default -> null;
        };
    }

    private void clearTextFields() {
        tfId.setText("");
        tfName.setText("");
        tfPhone.setText("");
        tfEmail.setText("");
        tfPassword.setText("");
    }

    private boolean textFieldsFilled() {
        return !tfId.getText().isEmpty() && !tfName.getText().isEmpty()
                && !tfPhone.getText().isEmpty() && !tfEmail.getText().isEmpty()
                && !tfPassword.getText().isEmpty();
    }

    private void addTableMouseListeners() {
        addTableMouseListener(tbUser);
        addTableMouseListener(tbScheduler);
        addTableMouseListener(tbAdministrator);
        addTableMouseListener(tbManager);
    }

    private void addTableMouseListener(final javax.swing.JTable table) {
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = table.rowAtPoint(evt.getPoint());
                if (row >= 0 && row < table.getRowCount()) {
                    table.setRowSelectionInterval(row, row);
                    baseManagement.DisplayToTextFields(table, row, tfId, tfName, tfPhone, tfEmail, tfPassword, cbStatus); // Use TableHelper
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        btSearch = new javax.swing.JButton();
        btDelete = new javax.swing.JButton();
        btCreate = new javax.swing.JButton();
        btUpdate = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        tfPassword = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tfName = new javax.swing.JTextField();
        tfId = new javax.swing.JTextField();
        tfPhone = new javax.swing.JTextField();
        tfEmail = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        btClear = new javax.swing.JButton();
        cbStatus = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbUser = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbScheduler = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbAdministrator = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbManager = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel3.setFont(new java.awt.Font("Segoe UI Black", 0, 48)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("ACCOUNT MANAGEMENT");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 40, -1, -1));

        btSearch.setBackground(new java.awt.Color(235, 235, 235));
        btSearch.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btSearch.setForeground(new java.awt.Color(0, 0, 0));
        btSearch.setText("SEARCH");
        btSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSearchActionPerformed(evt);
            }
        });
        getContentPane().add(btSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 150, 170, 35));

        btDelete.setBackground(new java.awt.Color(235, 235, 235));
        btDelete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btDelete.setForeground(new java.awt.Color(0, 0, 0));
        btDelete.setText("DELETE");
        btDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDeleteActionPerformed(evt);
            }
        });
        getContentPane().add(btDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 150, 170, 35));

        btCreate.setBackground(new java.awt.Color(235, 235, 235));
        btCreate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btCreate.setForeground(new java.awt.Color(0, 0, 0));
        btCreate.setText("CREATE");
        btCreate.setMaximumSize(new java.awt.Dimension(72, 30));
        btCreate.setPreferredSize(new java.awt.Dimension(72, 35));
        btCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCreateActionPerformed(evt);
            }
        });
        getContentPane().add(btCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 150, 170, -1));

        btUpdate.setBackground(new java.awt.Color(235, 235, 235));
        btUpdate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btUpdate.setForeground(new java.awt.Color(0, 0, 0));
        btUpdate.setText("UPDATE");
        btUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUpdateActionPerformed(evt);
            }
        });
        getContentPane().add(btUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 150, 170, 35));

        jPanel3.setBackground(new java.awt.Color(0, 137, 248));

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel8.setText("EMAIL");

        jLabel9.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel9.setText("NAME");

        jLabel10.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel10.setText("PHONE");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel11.setText("PASSWORD");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel12.setText("ID");

        btClear.setBackground(new java.awt.Color(235, 235, 235));
        btClear.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btClear.setForeground(new java.awt.Color(0, 0, 0));
        btClear.setText("CLEAR FILTER");
        btClear.setMaximumSize(new java.awt.Dimension(50, 23));
        btClear.setMinimumSize(new java.awt.Dimension(50, 23));
        btClear.setPreferredSize(new java.awt.Dimension(50, 23));
        btClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btClearActionPerformed(evt);
            }
        });

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ACTIVE", "BLOCKED" }));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel13.setText("STATUS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(cbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tfPhone, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addComponent(tfEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addComponent(jLabel11)
                        .addComponent(tfPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                        .addComponent(btClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addComponent(jLabel8)
                        .addComponent(jLabel12)
                        .addComponent(tfId)
                        .addComponent(jLabel9)
                        .addComponent(tfName, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(220, Short.MAX_VALUE)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfId, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfName, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62)
                .addComponent(btClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -1, 250, 780));

        jTabbedPane1.setBackground(new java.awt.Color(0, 0, 0));

        tbUser.setAutoCreateRowSorter(true);
        tbUser.setForeground(new java.awt.Color(0, 0, 0));
        tbUser.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "USER ID", "NAME", "PHONE", "EMAIL", "PASSWORD", "STATUS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbUser.setGridColor(new java.awt.Color(0, 0, 0));
        tbUser.setRowHeight(25);
        tbUser.setShowGrid(false);
        tbUser.setShowHorizontalLines(true);
        jScrollPane1.setViewportView(tbUser);

        jTabbedPane1.addTab("USER", jScrollPane1);

        tbScheduler.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "SCHEDULER ID", "NAME", "PHONE", "EMAIL", "PASSWORD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbScheduler.setRowHeight(25);
        tbScheduler.setShowHorizontalLines(true);
        jScrollPane3.setViewportView(tbScheduler);

        jTabbedPane1.addTab("SCHEDULER", jScrollPane3);

        tbAdministrator.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ADMIN ID", "NAME", "PHONE", "EMAIL", "PASSWORD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbAdministrator.setRowHeight(25);
        tbAdministrator.setShowHorizontalLines(true);
        jScrollPane4.setViewportView(tbAdministrator);

        jTabbedPane1.addTab("ADMINISTRATOR", jScrollPane4);

        tbManager.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MANAGER ID", "NAME", "PHONE", "EMAIL", "PASSWORD"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbManager.setRowHeight(25);
        tbManager.setShowHorizontalLines(true);
        jScrollPane5.setViewportView(tbManager);

        jTabbedPane1.addTab("MANAGER", jScrollPane5);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 200, 950, 580));

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/oodjassignment/picture/blue.jpg"))); // NOI18N
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 1200, 800));

        jMenuBar1.setBackground(new java.awt.Color(226, 218, 214));
        jMenuBar1.setForeground(new java.awt.Color(0, 0, 0));
        jMenuBar1.setFocusable(false);
        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 48)); // NOI18N

        jMenu2.setText("HOME");
        jMenu2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu2MouseClicked(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseClicked
        AdministratorHomepage AdministratorHomepage = new AdministratorHomepage();
        AdministratorHomepage.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jMenu2MouseClicked

    private void btCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCreateActionPerformed
        if (textFieldsFilled()) {
            String userId = tfId.getText();
            String name = tfName.getText();
            String phoneNumber = tfPhone.getText();
            String email = tfEmail.getText();
            String password = tfPassword.getText();

            // Validate input using the Validator class
            if (!DataValidation.isValidUserId(userId)) {
                JOptionPane.showMessageDialog(this, "Invalid User ID. It must be 1 letter followed by 4 digits.");
                return;
            }

            if (!DataValidation.isValidPhoneNumber(phoneNumber)) {
                JOptionPane.showMessageDialog(this, "Invalid Phone Number. It must contain 10-11 digits.");
                return;
            }

            if (!DataValidation.isValidEmail(email)) {
                JOptionPane.showMessageDialog(this, "Invalid Email Address. It must contain '@' and end with '.com'.");
                return;
            }

            if (!DataValidation.isValidPassword(password)) {
                JOptionPane.showMessageDialog(this, "Invalid Password. It must contain at least 1 uppercase letter, 1 symbol, 1 digit, and be at least 8 characters long.");
                return;
            }
            if (DataValidation.isDuplicate(userId, name, phoneNumber, email)) {
                JOptionPane.showMessageDialog(this, "Duplicate record found. Please check the User ID, Name, Phone Number, or Email.");
                return;
            }

            javax.swing.JTable selectedTable = getSelectedTable();
            if (selectedTable != null) {
                String[] data;
                if (selectedTable == tbUser) {
                    data = new String[]{
                        tfId.getText(),
                        tfName.getText(),
                        tfPhone.getText(),
                        tfEmail.getText(),
                        tfPassword.getText(),
                        (String) cbStatus.getSelectedItem()
                    };
                } else {

                    data = new String[]{
                        tfId.getText(),
                        tfName.getText(),
                        tfPhone.getText(),
                        tfEmail.getText(),
                        tfPassword.getText()
                    };
                }
                baseManagement.createAccount(selectedTable, data);
                clearTextFields();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
        }
    }//GEN-LAST:event_btCreateActionPerformed

    private void btClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btClearActionPerformed
        clearTextFields();
        javax.swing.JTable selectedTable = getSelectedTable();
        if (selectedTable != null) {
            TableRowSorter<DefaultTableModel> sorter = (TableRowSorter<DefaultTableModel>) selectedTable.getRowSorter();
            if (sorter != null) {
                sorter.setRowFilter(null); // Clear the filter
            }
        }
    }//GEN-LAST:event_btClearActionPerformed

    private void btSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSearchActionPerformed
        javax.swing.JTable selectedTable = getSelectedTable();
        if (selectedTable != null) {
            String status = cbStatus.getSelectedItem() != null ? cbStatus.getSelectedItem().toString(): "";
            String[] fieldValues = {
                tfId.getText(),
                tfName.getText(),
                tfPhone.getText(),
                tfEmail.getText(),
                tfPassword.getText(),
                status
            };
            int[] columnIndices = {0, 1, 2, 3, 4, 5}; // Adjust based on the table's columns
            baseManagement.searchAccounts(selectedTable, fieldValues, columnIndices);
        } else {
            JOptionPane.showMessageDialog(this, "Please select a table to perform search");
        }
    }//GEN-LAST:event_btSearchActionPerformed

    private void btUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUpdateActionPerformed
        if (textFieldsFilled()) {
            String userId = tfId.getText();
            String name = tfName.getText();
            String phoneNumber = tfPhone.getText();
            String email = tfEmail.getText();
            String password = tfPassword.getText();

            // Validate input using the Validator class
            if (!DataValidation.isValidUserId(userId)) {
                JOptionPane.showMessageDialog(this, "Invalid User ID. It must be 1 letter followed by 4 digits.");
                return;
            }

            if (!DataValidation.isValidPhoneNumber(phoneNumber)) {
                JOptionPane.showMessageDialog(this, "Invalid Phone Number. It must contain 10-11 digits.");
                return;
            }

            if (!DataValidation.isValidEmail(email)) {
                JOptionPane.showMessageDialog(this, "Invalid Email Address. It must contain '@' and end with '.com'.");
                return;
            }

            if (!DataValidation.isValidPassword(password)) {
                JOptionPane.showMessageDialog(this, "Invalid Password. It must contain at least 1 uppercase letter, 1 symbol, 1 digit, and be at least 8 characters long.");
                return;
            }

            // Check for duplicates, excluding the current record
            javax.swing.JTable selectedTable = getSelectedTable();
            if (selectedTable != null) {
                int selectedRow = selectedTable.getSelectedRow();
                if (selectedRow == -1) {
                    JOptionPane.showMessageDialog(this, "Please select a row to update.");
                    return;
                }

                if (DataValidation.isDuplicateForUpdate(userId, name, phoneNumber, email, selectedRow, selectedTable)) {
                    JOptionPane.showMessageDialog(this, "Duplicate record found. Please check the User ID, Name, Phone Number, or Email.");
                    return;
                }

                String[] data;
                if (selectedTable == tbUser) {
                    data = new String[]{
                        tfId.getText(),
                        tfName.getText(),
                        tfPhone.getText(),
                        tfEmail.getText(),
                        tfPassword.getText(),
                        (String) cbStatus.getSelectedItem()
                    };
                } else {
                    data = new String[]{
                        tfId.getText(),
                        tfName.getText(),
                        tfPhone.getText(),
                        tfEmail.getText(),
                        tfPassword.getText()
                    };
                }

                baseManagement.updateAccount(selectedTable, selectedRow, data);
                clearTextFields();
            }
        } else {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.");
        }
    }//GEN-LAST:event_btUpdateActionPerformed

    private void btDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDeleteActionPerformed
        javax.swing.JTable selectedTable = getSelectedTable();
        if (selectedTable != null) {
            int selectedRow = selectedTable.getSelectedRow();
            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(this, "Please select a row to delete.");
                return;
            }
            baseManagement.deleteAccount(selectedTable, selectedRow); // Pass the table and row
            clearTextFields();
        }
    }//GEN-LAST:event_btDeleteActionPerformed

    class StatusCellRenderer extends DefaultTableCellRenderer {

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (value instanceof String) {
                String status = (String) value;
                if ("ACTIVE".equalsIgnoreCase(status)) {
                    cell.setForeground(Color.GREEN);
                } else if ("BLOCKED".equalsIgnoreCase(status)) {
                    cell.setForeground(Color.RED);
                } else {
                    cell.setForeground(Color.BLACK); // Default color if not matched
                }
            } else {
                cell.setForeground(Color.BLACK); // Default color for non-string values
            }

            return cell;
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AccountManagement().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btClear;
    private javax.swing.JButton btCreate;
    private javax.swing.JButton btDelete;
    private javax.swing.JButton btSearch;
    private javax.swing.JButton btUpdate;
    private javax.swing.JComboBox<String> cbStatus;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tbAdministrator;
    private javax.swing.JTable tbManager;
    private javax.swing.JTable tbScheduler;
    private javax.swing.JTable tbUser;
    private javax.swing.JTextField tfEmail;
    private javax.swing.JTextField tfId;
    private javax.swing.JTextField tfName;
    private javax.swing.JTextField tfPassword;
    private javax.swing.JTextField tfPhone;
    // End of variables declaration//GEN-END:variables
}
